# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import wishlist_pb2 as wishlist__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in wishlist_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DataAdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/wishlist.DataAdminService/CreateUser',
                request_serializer=wishlist__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=wishlist__pb2.UserResponse.FromString,
                _registered_method=True)
        self.UpsertUser = channel.unary_unary(
                '/wishlist.DataAdminService/UpsertUser',
                request_serializer=wishlist__pb2.UpsertUserRequest.SerializeToString,
                response_deserializer=wishlist__pb2.UserResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/wishlist.DataAdminService/GetUser',
                request_serializer=wishlist__pb2.GetUserRequest.SerializeToString,
                response_deserializer=wishlist__pb2.UserResponse.FromString,
                _registered_method=True)
        self.CreateWish = channel.unary_unary(
                '/wishlist.DataAdminService/CreateWish',
                request_serializer=wishlist__pb2.CreateWishRequest.SerializeToString,
                response_deserializer=wishlist__pb2.WishResponse.FromString,
                _registered_method=True)
        self.ListWishesByUser = channel.unary_unary(
                '/wishlist.DataAdminService/ListWishesByUser',
                request_serializer=wishlist__pb2.ListWishesByUserRequest.SerializeToString,
                response_deserializer=wishlist__pb2.ListWishesResponse.FromString,
                _registered_method=True)
        self.AutocompleteCity = channel.unary_unary(
                '/wishlist.DataAdminService/AutocompleteCity',
                request_serializer=wishlist__pb2.AutocompleteCityRequest.SerializeToString,
                response_deserializer=wishlist__pb2.AutocompleteCityResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/wishlist.DataAdminService/Ping',
                request_serializer=wishlist__pb2.Empty.SerializeToString,
                response_deserializer=wishlist__pb2.Empty.FromString,
                _registered_method=True)


class DataAdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWishesByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AutocompleteCity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=wishlist__pb2.CreateUserRequest.FromString,
                    response_serializer=wishlist__pb2.UserResponse.SerializeToString,
            ),
            'UpsertUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertUser,
                    request_deserializer=wishlist__pb2.UpsertUserRequest.FromString,
                    response_serializer=wishlist__pb2.UserResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=wishlist__pb2.GetUserRequest.FromString,
                    response_serializer=wishlist__pb2.UserResponse.SerializeToString,
            ),
            'CreateWish': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWish,
                    request_deserializer=wishlist__pb2.CreateWishRequest.FromString,
                    response_serializer=wishlist__pb2.WishResponse.SerializeToString,
            ),
            'ListWishesByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWishesByUser,
                    request_deserializer=wishlist__pb2.ListWishesByUserRequest.FromString,
                    response_serializer=wishlist__pb2.ListWishesResponse.SerializeToString,
            ),
            'AutocompleteCity': grpc.unary_unary_rpc_method_handler(
                    servicer.AutocompleteCity,
                    request_deserializer=wishlist__pb2.AutocompleteCityRequest.FromString,
                    response_serializer=wishlist__pb2.AutocompleteCityResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=wishlist__pb2.Empty.FromString,
                    response_serializer=wishlist__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wishlist.DataAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('wishlist.DataAdminService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataAdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wishlist.DataAdminService/CreateUser',
            wishlist__pb2.CreateUserRequest.SerializeToString,
            wishlist__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpsertUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wishlist.DataAdminService/UpsertUser',
            wishlist__pb2.UpsertUserRequest.SerializeToString,
            wishlist__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wishlist.DataAdminService/GetUser',
            wishlist__pb2.GetUserRequest.SerializeToString,
            wishlist__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wishlist.DataAdminService/CreateWish',
            wishlist__pb2.CreateWishRequest.SerializeToString,
            wishlist__pb2.WishResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWishesByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wishlist.DataAdminService/ListWishesByUser',
            wishlist__pb2.ListWishesByUserRequest.SerializeToString,
            wishlist__pb2.ListWishesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AutocompleteCity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wishlist.DataAdminService/AutocompleteCity',
            wishlist__pb2.AutocompleteCityRequest.SerializeToString,
            wishlist__pb2.AutocompleteCityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wishlist.DataAdminService/Ping',
            wishlist__pb2.Empty.SerializeToString,
            wishlist__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
